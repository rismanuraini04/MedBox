// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String         @id @default(uuid())
  username          String         @unique
  email             String         @unique
  password          String
  passwordUpdatedAt DateTime
  accountIsVerified Boolean        @default(false)
  emailIsVerified   Boolean        @default(false)
  token             String?        @unique
  tokenExpiredAt    DateTime?
  tokenType         TOKEN_TYPE?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  role              Role           @relation(fields: [roleId], references: [id])
  roleId            String
  profil            Profil?
  smartMedicine     SmartMedicine?
}

model SmartMedicine {
  id            String         @id @default(cuid())
  name          String
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?        @unique
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  smartBracelet SmartBracelet?
  smartBox      SmartBox?
}

model SmartBracelet {
  id              String         @id @default(cuid())
  uniqCode        String         @unique
  temperature     String
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  SmartMedicine   SmartMedicine? @relation(fields: [smartMedicineId], references: [id])
  smartMedicineId String?        @unique
}

model SmartBox {
  id              String         @id @default(cuid())
  uniqCode        String         @unique
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  SmartMedicine   SmartMedicine? @relation(fields: [smartMedicineId], references: [id])
  smartMedicineId String?        @unique
  sensorBox       SensorBox[]
}

model SensorBox {
  id         String    @id @default(cuid())
  name       String
  SmartBox   SmartBox? @relation(fields: [smartBoxId], references: [id])
  smartBoxId String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Profil {
  id        String   @id @default(cuid())
  full_name String?
  photo     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TOKEN_TYPE {
  RESET_TOKEN
  VERIFICATION_TOKEN
}
