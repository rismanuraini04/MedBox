// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String         @id @default(uuid())
  username          String         @unique
  email             String         @unique
  phone             String?        @unique
  password          String
  passwordUpdatedAt DateTime
  accountIsVerified Boolean        @default(false)
  emailIsVerified   Boolean        @default(false)
  token             String?        @unique
  tokenExpiredAt    DateTime?
  tokenType         TOKEN_TYPE?
  subscription      Subscription[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  role              Role           @relation(fields: [roleId], references: [id])
  roleId            String
  profil            Profil?
  smartMedicine     SmartMedicine?
}

model Subscription {
  id                    String    @id @default(uuid())
  identifier            String    @unique
  subscriptionToken     String?
  subscriptionExpiredAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  User                  User?     @relation(fields: [userId], references: [id])
  userId                String?
}

model Profil {
  id        String   @id @default(cuid())
  full_name String?
  photo     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmartMedicine {
  id            String         @id @default(cuid())
  name          String
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?        @unique
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  smartBracelet SmartBracelet?
  smartBox      SmartBox?
}

model SmartBracelet {
  id                 String                   @id @default(cuid())
  uniqCode           String                   @unique
  temperature        String?
  temperatureHistory BodyTemperatureHistory[]
  createdAt          DateTime?                @default(now())
  updatedAt          DateTime?                @updatedAt
  SmartMedicine      SmartMedicine?           @relation(fields: [smartMedicineId], references: [id])
  smartMedicineId    String?                  @unique
}

model BodyTemperatureHistory {
  id              String         @id @default(cuid())
  temperature     String?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  SmartBracelet   SmartBracelet? @relation(fields: [smartBraceletId], references: [id])
  smartBraceletId String?
}

model SmartBox {
  id              String         @id @default(cuid())
  uniqCode        String         @unique
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  SmartMedicine   SmartMedicine? @relation(fields: [smartMedicineId], references: [id])
  smartMedicineId String?        @unique
  sensorBox       SensorBox[]
}

model SensorBox {
  id              String            @id @default(cuid())
  name            String
  weight          String?
  reminder        Reminder[]
  medicineHistory MedicineHistory[]
  SmartBox        SmartBox?         @relation(fields: [smartBoxId], references: [id])
  smartBoxId      String?
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt
}

model MedicineHistory {
  id          String           @id @default(cuid())
  status      MEDICINE_STATUS?
  schedule    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  SensorBox   SensorBox?       @relation(fields: [sensorBoxId], references: [id])
  sensorBoxId String?
}

model Reminder {
  id               String         @id @default(cuid())
  name             String?
  startDate        DateTime?
  finishDate       DateTime?
  interval         String?
  time             String?
  reminder_task_id String?
  reminder_before  String?
  reminder_after   String?
  reminder_type    REMINDER_TYPE?
  reminder_status  Boolean?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  SensorBox        SensorBox?     @relation(fields: [sensorBoxId], references: [id])
  sensorBoxId      String?
}

enum TOKEN_TYPE {
  RESET_TOKEN
  VERIFICATION_TOKEN
}

enum REMINDER_TYPE {
  X_TIME_DAY
  EVERY_X_DAY
  EVERY_X_WEEK
}

enum MEDICINE_STATUS {
  ONTIME
  LATE
  NOT_TAKEN
}
